#summary ioreplay - IO traces replayer
<wiki:toc max_depth="3" />

= Introduction =

*ioreplay* is a tool for replaying IO traces. It is capable of very precious simulation of the original, traced application by issuing the same IO system calls in the same time. It is mainly useful as a standalone benchmark tool in situations, where running the original application is not possible (i.e. it requires a complicated system setup, licenses problems, input data problems etc.) or desirable. 

= Use case =

Imagine you have a complex application X that is quite IO intensive. It requires many libraries and it is rather hard to install, not to mention it processes data files that are not publicly available. You wonder whether using SSD disks instead of traditional hard drives could improve the performance of your application. 

Your colleague (or a vendor) have proposed that he can run a simple benchmark to measure the performance difference on a new hardware he has.
Because of aforementioned reasons, you can't afford to run the real application. You don't want to use a synthetic benchmark such as _iozone_ or _bonnie++_ (while perfect tools) because they aren't really representative for your workload.

Instead, you can record all IO operations that your application does. Then, on a target test system, you replay them producing the exact same IO workload as the original application.

= Features =
  * Zero dependencies
  * Ability to trace *all children processes* spawned by the traced parent process. You *can* trace complicated jobs that execute many child scripts.
  * Intelligent and fast file descriptor-to-file name mapping, written in C for performance
   * this includes the previous bullet
   * this includes handling of {{{ dup, dup2, dup3, pipe, socket, clone }}} system calls.

= Usage = 
 == Record traces ==
  * trace the application of interest using this command
{{{
strace -q -a1 -s0 -f -tttT -oOUT_FILE -e trace=file,desc,process,socket APPLICATION ARGUMENTS
}}}
  * write down the time overhead the application had under strace in comparison with a normal run
  * _optionally_ [IOReplayConvert convert] the OUT_FILE to a binary form using [ioreplay]
 == Prepare environment ==
 == Replay ==
 == Verify scaling ==

= Installation =
==Dependencies==
None.
==Installation==
===From source===
Grab source from svn and then:

To install just the IOreplay and not the whole IOapps suite (see [IOAppsInstallation this] for details), run following commands:
{{{
make replay
}}}
and then
{{{
make install_replay
}}}

This will install ioreplay binary and manual page to your system.
===From RPM package===
TO BE DONE

This will install ioreplay binary and manual page to your system.

= Architecture = 
IOreplay is completely written in C.

= Drawbacks =
  * TO BE WRITTEN